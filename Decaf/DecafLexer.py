# Generated from Decaf/Decaf.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u011d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3")
        buf.write("\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r")
        buf.write("\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27")
        buf.write("\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34")
        buf.write("\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\3)\3*\3*\3+\3+\3")
        buf.write("+\7+\u00ea\n+\f+\16+\u00ed\13+\3,\3,\7,\u00f1\n,\f,\16")
        buf.write(",\u00f4\13,\3-\3-\3-\3-\5-\u00fa\n-\3-\3-\3.\6.\u00ff")
        buf.write("\n.\r.\16.\u0100\3.\3.\3/\3/\3/\3/\7/\u0109\n/\f/\16/")
        buf.write("\u010c\13/\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\7\60\u0117")
        buf.write("\n\60\f\60\16\60\u011a\13\60\3\60\3\60\3\u010a\2\61\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q\2")
        buf.write("S\2U*W+Y,[-]._/\3\2\7\5\2C\\aac|\6\2\f\f\17\17))^^\4\2")
        buf.write("))^^\5\2\13\f\16\17\"\"\4\2\f\f\17\17\2\u0121\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2")
        buf.write("\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2")
        buf.write("\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2")
        buf.write("\2\2\2M\3\2\2\2\2O\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3")
        buf.write("\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5g")
        buf.write("\3\2\2\2\7i\3\2\2\2\tk\3\2\2\2\13m\3\2\2\2\ro\3\2\2\2")
        buf.write("\17q\3\2\2\2\21x\3\2\2\2\23|\3\2\2\2\25\u0081\3\2\2\2")
        buf.write("\27\u0089\3\2\2\2\31\u008e\3\2\2\2\33\u0090\3\2\2\2\35")
        buf.write("\u0092\3\2\2\2\37\u0094\3\2\2\2!\u009b\3\2\2\2#\u009d")
        buf.write("\3\2\2\2%\u00a0\3\2\2\2\'\u00a5\3\2\2\2)\u00ab\3\2\2\2")
        buf.write("+\u00ad\3\2\2\2-\u00af\3\2\2\2/\u00b1\3\2\2\2\61\u00b3")
        buf.write("\3\2\2\2\63\u00b5\3\2\2\2\65\u00b8\3\2\2\2\67\u00bb\3")
        buf.write("\2\2\29\u00be\3\2\2\2;\u00c1\3\2\2\2=\u00c3\3\2\2\2?\u00c5")
        buf.write("\3\2\2\2A\u00c7\3\2\2\2C\u00ca\3\2\2\2E\u00cd\3\2\2\2")
        buf.write("G\u00cf\3\2\2\2I\u00d2\3\2\2\2K\u00d5\3\2\2\2M\u00d7\3")
        buf.write("\2\2\2O\u00dc\3\2\2\2Q\u00e2\3\2\2\2S\u00e4\3\2\2\2U\u00e6")
        buf.write("\3\2\2\2W\u00ee\3\2\2\2Y\u00f5\3\2\2\2[\u00fe\3\2\2\2")
        buf.write("]\u0104\3\2\2\2_\u0112\3\2\2\2ab\7e\2\2bc\7n\2\2cd\7c")
        buf.write("\2\2de\7u\2\2ef\7u\2\2f\4\3\2\2\2gh\7}\2\2h\6\3\2\2\2")
        buf.write("ij\7\177\2\2j\b\3\2\2\2kl\7=\2\2l\n\3\2\2\2mn\7]\2\2n")
        buf.write("\f\3\2\2\2op\7_\2\2p\16\3\2\2\2qr\7u\2\2rs\7v\2\2st\7")
        buf.write("t\2\2tu\7w\2\2uv\7e\2\2vw\7v\2\2w\20\3\2\2\2xy\7k\2\2")
        buf.write("yz\7p\2\2z{\7v\2\2{\22\3\2\2\2|}\7e\2\2}~\7j\2\2~\177")
        buf.write("\7c\2\2\177\u0080\7t\2\2\u0080\24\3\2\2\2\u0081\u0082")
        buf.write("\7d\2\2\u0082\u0083\7q\2\2\u0083\u0084\7q\2\2\u0084\u0085")
        buf.write("\7n\2\2\u0085\u0086\7g\2\2\u0086\u0087\7c\2\2\u0087\u0088")
        buf.write("\7p\2\2\u0088\26\3\2\2\2\u0089\u008a\7x\2\2\u008a\u008b")
        buf.write("\7q\2\2\u008b\u008c\7k\2\2\u008c\u008d\7f\2\2\u008d\30")
        buf.write("\3\2\2\2\u008e\u008f\7*\2\2\u008f\32\3\2\2\2\u0090\u0091")
        buf.write("\7.\2\2\u0091\34\3\2\2\2\u0092\u0093\7+\2\2\u0093\36\3")
        buf.write("\2\2\2\u0094\u0095\7t\2\2\u0095\u0096\7g\2\2\u0096\u0097")
        buf.write("\7v\2\2\u0097\u0098\7w\2\2\u0098\u0099\7t\2\2\u0099\u009a")
        buf.write("\7p\2\2\u009a \3\2\2\2\u009b\u009c\7?\2\2\u009c\"\3\2")
        buf.write("\2\2\u009d\u009e\7k\2\2\u009e\u009f\7h\2\2\u009f$\3\2")
        buf.write("\2\2\u00a0\u00a1\7g\2\2\u00a1\u00a2\7n\2\2\u00a2\u00a3")
        buf.write("\7u\2\2\u00a3\u00a4\7g\2\2\u00a4&\3\2\2\2\u00a5\u00a6")
        buf.write("\7y\2\2\u00a6\u00a7\7j\2\2\u00a7\u00a8\7k\2\2\u00a8\u00a9")
        buf.write("\7n\2\2\u00a9\u00aa\7g\2\2\u00aa(\3\2\2\2\u00ab\u00ac")
        buf.write("\7\60\2\2\u00ac*\3\2\2\2\u00ad\u00ae\7/\2\2\u00ae,\3\2")
        buf.write("\2\2\u00af\u00b0\7#\2\2\u00b0.\3\2\2\2\u00b1\u00b2\7>")
        buf.write("\2\2\u00b2\60\3\2\2\2\u00b3\u00b4\7@\2\2\u00b4\62\3\2")
        buf.write("\2\2\u00b5\u00b6\7>\2\2\u00b6\u00b7\7?\2\2\u00b7\64\3")
        buf.write("\2\2\2\u00b8\u00b9\7@\2\2\u00b9\u00ba\7?\2\2\u00ba\66")
        buf.write("\3\2\2\2\u00bb\u00bc\7?\2\2\u00bc\u00bd\7?\2\2\u00bd8")
        buf.write("\3\2\2\2\u00be\u00bf\7#\2\2\u00bf\u00c0\7?\2\2\u00c0:")
        buf.write("\3\2\2\2\u00c1\u00c2\7,\2\2\u00c2<\3\2\2\2\u00c3\u00c4")
        buf.write("\7\61\2\2\u00c4>\3\2\2\2\u00c5\u00c6\7\'\2\2\u00c6@\3")
        buf.write("\2\2\2\u00c7\u00c8\7>\2\2\u00c8\u00c9\7>\2\2\u00c9B\3")
        buf.write("\2\2\2\u00ca\u00cb\7@\2\2\u00cb\u00cc\7@\2\2\u00ccD\3")
        buf.write("\2\2\2\u00cd\u00ce\7-\2\2\u00ceF\3\2\2\2\u00cf\u00d0\7")
        buf.write("(\2\2\u00d0\u00d1\7(\2\2\u00d1H\3\2\2\2\u00d2\u00d3\7")
        buf.write("~\2\2\u00d3\u00d4\7~\2\2\u00d4J\3\2\2\2\u00d5\u00d6\7")
        buf.write(")\2\2\u00d6L\3\2\2\2\u00d7\u00d8\7v\2\2\u00d8\u00d9\7")
        buf.write("t\2\2\u00d9\u00da\7w\2\2\u00da\u00db\7g\2\2\u00dbN\3\2")
        buf.write("\2\2\u00dc\u00dd\7h\2\2\u00dd\u00de\7c\2\2\u00de\u00df")
        buf.write("\7n\2\2\u00df\u00e0\7u\2\2\u00e0\u00e1\7g\2\2\u00e1P\3")
        buf.write("\2\2\2\u00e2\u00e3\t\2\2\2\u00e3R\3\2\2\2\u00e4\u00e5")
        buf.write("\4\62;\2\u00e5T\3\2\2\2\u00e6\u00eb\5Q)\2\u00e7\u00ea")
        buf.write("\5Q)\2\u00e8\u00ea\5S*\2\u00e9\u00e7\3\2\2\2\u00e9\u00e8")
        buf.write("\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb")
        buf.write("\u00ec\3\2\2\2\u00ecV\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee")
        buf.write("\u00f2\5S*\2\u00ef\u00f1\5S*\2\u00f0\u00ef\3\2\2\2\u00f1")
        buf.write("\u00f4\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2")
        buf.write("\u00f3X\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00f9\7)\2\2")
        buf.write("\u00f6\u00fa\n\3\2\2\u00f7\u00f8\7^\2\2\u00f8\u00fa\t")
        buf.write("\4\2\2\u00f9\u00f6\3\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00fb")
        buf.write("\3\2\2\2\u00fb\u00fc\7)\2\2\u00fcZ\3\2\2\2\u00fd\u00ff")
        buf.write("\t\5\2\2\u00fe\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100")
        buf.write("\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0103\b.\2\2\u0103\\\3\2\2\2\u0104\u0105\7\61\2")
        buf.write("\2\u0105\u0106\7,\2\2\u0106\u010a\3\2\2\2\u0107\u0109")
        buf.write("\13\2\2\2\u0108\u0107\3\2\2\2\u0109\u010c\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010a\u0108\3\2\2\2\u010b\u010d\3\2\2\2")
        buf.write("\u010c\u010a\3\2\2\2\u010d\u010e\7,\2\2\u010e\u010f\7")
        buf.write("\61\2\2\u010f\u0110\3\2\2\2\u0110\u0111\b/\3\2\u0111^")
        buf.write("\3\2\2\2\u0112\u0113\7\61\2\2\u0113\u0114\7\61\2\2\u0114")
        buf.write("\u0118\3\2\2\2\u0115\u0117\n\6\2\2\u0116\u0115\3\2\2\2")
        buf.write("\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119\3")
        buf.write("\2\2\2\u0119\u011b\3\2\2\2\u011a\u0118\3\2\2\2\u011b\u011c")
        buf.write("\b\60\3\2\u011c`\3\2\2\2\n\2\u00e9\u00eb\u00f2\u00f9\u0100")
        buf.write("\u010a\u0118\4\2\3\2\2\4\2")
        return buf.getvalue()


class DecafLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    ID = 40
    NUM = 41
    CHAR = 42
    WS = 43
    COMMENT = 44
    LINE_COMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'}'", "';'", "'['", "']'", "'struct'", "'int'", 
            "'char'", "'boolean'", "'void'", "'('", "','", "')'", "'return'", 
            "'='", "'if'", "'else'", "'while'", "'.'", "'-'", "'!'", "'<'", 
            "'>'", "'<='", "'>='", "'=='", "'!='", "'*'", "'/'", "'%'", 
            "'<<'", "'>>'", "'+'", "'&&'", "'||'", "'''", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "CHAR", "WS", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "LETTER", "DIGIT", "ID", "NUM", "CHAR", "WS", 
                  "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "Decaf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


